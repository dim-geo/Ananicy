#!/bin/bash
################################################################################
# Ananicy - is Another auto nice daemon, with community rules support
# Configs are placed under /etc/ananicy.d/

################################################################################
# Define some fuctions
INFO(){ echo -n "INFO: "; echo "$@" ;}
WARN(){ echo -n "WARN: "; echo "$@" ;}
ERRO(){ echo -n "ERRO: "; echo -n "$@" ; echo " Abort!"; exit 1;}

################################################################################
# Check DIR_CONFIGS
DIR_CONFIGS=/etc/ananicy.d/
INFO "Check $DIR_CONFIGS dir"
[ -d "$DIR_CONFIGS" ] || ERRO "Config dir $DIR_CONFIGS doesn't exist!"

################################################################################
# Load all rule file names
INFO "Search rules"
CONFIGS=( $(find -P $DIR_CONFIGS -name "*.rules" -type f) )
[ "0" != "${#CONFIGS[@]}" ] || ERRO "Config dir: $DIR_CONFIGS are empty!"

################################################################################
# Dedup rules
declare -A RULE_CACHE_TMP
INFO "Read rules to buffer"
for config in "${CONFIGS[@]}"; do
    while read -r LINE; do
        #                    remove comments | remove unsafe symbols
        LINE="$(echo "$LINE" | cut -d'#' -f1 | tr -d '()`$' )"
        [ -z "$LINE" ] && continue
        for COLUMN in $LINE; do
            case "$COLUMN" in
                NAME=*)
                    NAME="${COLUMN//NAME=/}"
                    [ -z "$NAME" ] && \
                        ERRO "$config:$line_number NAME are empty!"
                    RULE_CACHE_TMP["$NAME"]="$LINE"
                ;;
            esac
        done
    done < "$config"
done

unset CONFIGS
################################################################################
# Compile rules
INFO "Compile rules to cache"
RULE_CACHE=()
for LINE in "${RULE_CACHE_TMP[@]}"; do
    # Check if line do something
    case "$LINE" in
        *NICE=*)    : ;;
        *IOCLASS=*) : ;;
        *IONICE=*)  : ;;
        *SCHED=*)   : ;;
        *) continue ;;
    esac

    # Check if data in line are valid
    unset NICE IONICE IOCLASS SCHED
    for COLUMN in $LINE; do
        case "$COLUMN" in
            NICE=*)
                NICE="${COLUMN//NICE=/}"
                if [[ "$NICE" -gt 19 ]] || [[ -20 -gt "$NICE" ]]; then
                    WARN "Nice must be in range -20..19 (line ignored): $LINE"
                    unset LINE
                fi
            ;;
            IONICE=*)
                IONICE="${COLUMN//IONICE=/}"
                [[ $IONICE =~ [0-7] ]] || {
                    WARN "IOnice/IOprio allowed only in range 0-7 (line ignored): $LINE"
                    unset LINE
                }
            ;;
            IOCLASS=*)
                IOCLASS="${COLUMN//IOCLASS=/}"
                [[ $IOCLASS =~ (idle|realtime|best-effort) ]] || {
                    WARN "IOclass (case sensitive) support only (idle|realtime|best-effort) (line ignored): $LINE"
                    unset LINE
                }
            ;;
            SCHED=*)
                SCHED="${COLUMN//SCHED=/}"
                [[ $SCHED =~ (batch|deadline|fifo|idle|other|rr|iso) ]] || {
                    WARN "Sched (case sensitive) support only (batch|deadline|fifo|idle|other|rr|iso) (line ignored): $LINE"
                    unset LINE
                }
            ;;
        esac
    done

    if [ "$IOCLASS" == "idle" ] && [ ! -z $IONICE ]; then
        WARN "IOnice can't use IOclass idle + ionice/ioprio (line ignored): $LINE"
        continue
    fi

    RULE_CACHE=( "${RULE_CACHE[@]}" "$LINE" )
done
unset RULE_CACHE_TMP

[ "0" == "${#RULE_CACHE[@]}" ] && ERRO "No rule is enabled!"

INFO "Initialization completed"
echo "---"

################################################################################
# Show cached information
show_cache(){
    INFO "Dump compiled rules"
    {
        for cache_line in "${RULE_CACHE[@]}"; do
            echo "$cache_line"
        done
    } | sort | column -t
}

trap "{ show_cache; }" SIGUSR1

################################################################################
# Helper for wrapper_renice()
nice_of_pid(){
    # 19 column in stat is a nice
    # But in some cases (name of process have a spaces)
    # It's break so.. use long solution
    [ -f /proc/$1/stat ] || return 1
    stat=( $(sed 's/) . /:/g' /proc/$1/stat 2> /dev/null | cut -d':' -f2) )
    echo ${stat[15]}
}

################################################################################
# Nice handler for process name
wrapper_renice(){
    NAME="$1" PID="$2" NICE="$3"; [ -z $NICE ] && return
    C_NICE=$(nice_of_pid $PID);   [ -z "$C_NICE" ] && return
    [ "$C_NICE" == "$NICE" ] && return
    renice -n $NICE -p $PID &> /dev/null || return
    INFO "Process ${NAME}[$PID] cpu nice: $C_NICE -> $NICE"
}

################################################################################
# Helpers for wrapper_ionice
ioclass_of_pid(){ ionice -p $1 2> /dev/null | cut -d':' -f1; }
ionice_of_pid(){  ionice -p $1 2> /dev/null | cut -d':' -f2 | tr -d ' prio'; }

################################################################################
# IONice handlers for process name
wrapper_ionice(){
    NAME="$1" PID="$2" IONICE="$3"; [ -z "$IONICE" ] && return
    C_IONICE=$(ionice_of_pid $PID); [ -z "$C_IONICE" ] && return
    [ "$C_IONICE" == "$IONICE" ] && return
    ionice -n "$IONICE" -p "$PID" &> /dev/null || return
    INFO "Process ${NAME}[$PID] ionice: $C_IONICE -> $IONICE"
}

wrapper_ionice_class(){
    NAME="$1" PID="$2" IOCLASS="$3";  [ -z "$IOCLASS" ] && return
    C_IOCLASS=$(ioclass_of_pid $PID); [ -z "$C_IOCLASS" ] && return
    [[ "$C_IOCLASS" =~ $IOCLASS ]] && return
    ionice -c "$IOCLASS" -p "$PID" &> /dev/null || return
    INFO "Process ${NAME}[$PID] ioclass: $C_IOCLASS -> $IOCLASS"
}

chrt_policy_of_pid(){ chrt -p $1 2> /dev/null | grep policy | cut -d ':' -f2 | tr -d ' '; }

schedtool_policy_of_pid(){ schedtool $1 2> /dev/null | grep POLICY | cut -d ':' -f3 | cut -d ' ' -f2 | tr -d ' '; }

################################################################################
# chrt handler for process name
wrapper_chrt_policy(){
    NAME="$1" PID="$2" SCHED="$3" L_PRIO=0; [ -z "$SCHED" ] && return
    C_SCHED=$(chrt_policy_of_pid $PID)
    C_SCHED="${C_SCHED//SCHED_/}"   # Remove 'SCHED_' prefix
    C_SCHED="${C_SCHED,,}"          # Upper case to lower case
    [ -z "$C_SCHED" ] && return
    [[ "$SCHED" =~ $C_SCHED ]] && return
    [[ "$SCHED" =~ (rr|fifo) ]] && L_PRIO=1
    chrt -a --$SCHED -p $L_PRIO $PID &> /dev/null || return
    INFO "Process ${NAME}[$PID] sched: $C_SCHED -> $SCHED"
}

wrapper_schedtool_policy(){
    NAME="$1" PID="$2" SCHED="$3" L_PRIO=0; [ -z "$SCHED" ] && return
    C_SCHED=$(schedtool_policy_of_pid $PID)
    C_SCHED="${C_SCHED//SCHED_/}"   # Remove 'SCHED_' prefix
    C_SCHED="${C_SCHED,,}"          # Upper case to lower case
    [ -z "$C_SCHED" ] && return
    [[ "$SCHED" =~ $C_SCHED ]] && return
    [[ "$SCHED" =~ other ]] && [[ "$C_SCHED" =~ normal ]] && return
    [[ "$SCHED" =~ idle ]] && [[ "$C_SCHED" =~ idleprio ]] && return
    [[ "$SCHED" =~ (rr|fifo) ]] && L_PRIO=1
    [[ "$SCHED" =~ (other|normal) ]] && SCHEDARGUMENT="-N"
    [[ "$SCHED" =~ fifo ]] && SCHEDARGUMENT="-F"
    [[ "$SCHED" =~ rr ]] && SCHEDARGUMENT="-R"
    [[ "$SCHED" =~ batch ]] && SCHEDARGUMENT="-B"
    [[ "$SCHED" =~ iso ]] && SCHEDARGUMENT="-I"
    [[ "$SCHED" =~ idle ]] && SCHEDARGUMENT="-D"

    schedtool $SCHEDARGUMENT -p $L_PRIO $PID &> /dev/null || return
    INFO "Process ${NAME}[$PID] sched: $C_SCHED -> $SCHED"
}

check_root_rights(){ [ "$UID" == "0" ] || ERRO "Script must be runned as root!"; }

main_pid_get(){
    PIDS=( $(pgrep ananicy | grep -v $$) )
    [ -z "${PIDS[0]}" ] && ERRO "Can't find running Ananicy"
    echo "${PIDS[@]}"
}

check_schedulers(){
    for disk_path in /sys/class/block/*; do
        disk_name=$(basename $disk_path)
        scheduler_path="$disk_path/queue/scheduler"
        [ ! -f $scheduler_path ] && continue
        grep -q '\[cfq\]\|\[bfq\]' $scheduler_path || \
            WARN "Disk $disk_name not used cfq scheduler IOCLASS/IONICE will not work on it!"
    done
}

show_help(){
    echo "$0 start - start daemon"
    echo "$0 dump rules cache - daemon will dump rules cache to stdout"
    echo "$0 dump rules parsed - generate and dump rules cache to stdout"
}

main_process(){
    for LINE in "${RULE_CACHE[@]}"; do
        NAME="" NICE="" IOCLASS="" IONICE="" SCHED=""
        for COLUMN in $LINE; do
            case "$COLUMN" in
                NAME=*)    NAME="${COLUMN//NAME=/}"         ;;
                NICE=*)    NICE="${COLUMN//NICE=/}"         ;;
                IONICE=*)  IONICE="${COLUMN//IONICE=/}"     ;;
                IOCLASS=*) IOCLASS="${COLUMN//IOCLASS=/}"   ;;
                SCHED=*)   SCHED="${COLUMN//SCHED=/}"
            esac
        done
        for PID in $( pgrep -w "$NAME" ); do
            [ -z "$PID" ] && continue
            [ ! -d "/proc/$PID" ] && continue
            [ ! -z "$NICE" ]    && wrapper_renice       "$NAME" "$PID" "$NICE" &
            [ ! -z "$IOCLASS" ] && wrapper_ionice_class "$NAME" "$PID" "$IOCLASS" &
            [ ! -z "$IONICE" ]  && wrapper_ionice       "$NAME" "$PID" "$IONICE" &
            [ ! -z "$SCHED" ]   && wrapper_schedtool_policy  "$NAME" "$PID" "$SCHED" &
            #[ ! -z "$SCHED" ]   && wrapper_chrt_policy  "$NAME" "$PID" "$SCHED" &
            wait
        done
    done
}

################################################################################
# Main process
case $1 in
    start)
        check_root_rights
        check_schedulers
        INFO "Start main process"
        RUN_FREQ=15
        while sleep $RUN_FREQ; do
            main_process;
        done
    ;;
    dump)
        case "$2" in
            rules)
                case "$3" in
                    cache)
                        check_root_rights
                        for pid in $(main_pid_get); do
                            [ -d /proc/$pid ] && \
                                kill -s SIGUSR1 $pid
                        done
                    ;;
                    parsed) show_cache ;;
                    *) show_help ;;
                esac
            ;;
            *) show_help ;;
        esac
    ;;
    *) show_help ;;
esac
